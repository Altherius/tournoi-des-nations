openapi: 3.0.0
info:
  title: 'Tournoi des nations'
  version: '0.0'
servers:
  -
    url: 'http://localhost'
    description: 'Local development environment'
  -
    url: 'https://tournoi-des-nations.ovh'
    description: 'Production environment'
paths:
  /token:
    post:
      tags:
        - Auth
      summary: 'Get JWT'
      operationId: 1257bfc641524ba028f12ef93b891eb5
      requestBody:
        $ref: '#/components/requestBodies/TokenRequest'
      responses:
        '200':
          description: 'The requested token'
          content:
            application/json:
              schema:
                properties:
                  token: { description: 'A JWT to use for authentication', type: string }
                type: object
        '401':
          description: 'Invalid credentials'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/games:
    get:
      tags:
        - Game
      summary: 'Get collection of games'
      operationId: 93736f40a135111a310e4b25ad61f30b
      responses:
        '200':
          description: 'A paginated collection of games'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GamePaginatedCollection'
    post:
      tags:
        - Game
      summary: 'Create game'
      operationId: b8b9557618eb0f7b3650bdd4ab3a6487
      requestBody:
        $ref: '#/components/requestBodies/GameCreateRequest'
      responses:
        '201':
          description: 'The created game'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Game' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/api/games/{id}':
    get:
      tags:
        - Game
      summary: 'Get game'
      operationId: f0bce1dcff3d56d19826d671761a43ff
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the game'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'The required game'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Game' }
                type: object
        '404':
          description: 'No game has been found with this ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/teams:
    get:
      tags:
        - Team
      summary: 'Get collection of teams'
      operationId: fc1c5dd9ef530faf6e8bba930cad296c
      responses:
        '200':
          description: 'A paginated collection of teams'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamPaginatedCollection'
    post:
      tags:
        - Team
      summary: 'Create team'
      operationId: b05c08b4a03b1d708fc94bf7dd5f8e46
      requestBody:
        $ref: '#/components/requestBodies/TeamCreateRequest'
      responses:
        '201':
          description: 'The created team'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Team' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/api/teams/{id}':
    get:
      tags:
        - Team
      summary: 'Get team'
      operationId: ab05003decb5cbc16154382836f51e3e
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the team'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'The required team'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Team' }
                type: object
        '404':
          description: 'No team has been found with this ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Team
      summary: 'Update team'
      operationId: 172602424f911881f80fc01c915f1e57
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the team'
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/TeamUpdateRequest'
      responses:
        '200':
          description: 'The updated team'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Team' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/tournaments:
    get:
      tags:
        - Tournament
      summary: 'Get collection of tournaments'
      operationId: 8626d4f0c19b7c5d27dce357833b6b97
      responses:
        '200':
          description: 'A paginated collection of tournaments'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentPaginatedCollection'
    post:
      tags:
        - Tournament
      summary: 'Create tournament'
      operationId: d6053f0972883878f37e936e0316a92d
      requestBody:
        $ref: '#/components/requestBodies/TournamentCreateRequest'
      responses:
        '201':
          description: 'The created tournament'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Tournament' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/api/tournaments/{id}':
    get:
      tags:
        - Tournament
      summary: 'Get tournament'
      operationId: 6fc0b01dfb2e637254d85be733c11867
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the tournament'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'The required tournament'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Tournament' }
                type: object
        '404':
          description: 'No tournament has been found with this ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Tournament
      summary: 'Update tournament'
      operationId: 8005525d118e8b5faf9780fe28777f31
      parameters:
        -
          name: id
          in: path
          description: 'The ID of the team'
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/TournamentUpdateRequest'
      responses:
        '200':
          description: 'The updated team'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Team' }
                type: object
        '400':
          description: 'Input format is incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: 'Input data has not been validated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    TokenCreateInput:
      required:
        - email
        - password
        - device_name
      properties:
        email:
          description: 'The email of the user'
          type: string
          format: email
          nullable: false
        password:
          description: 'The plain password of the user'
          type: string
          example: secret
          nullable: false
        device_name:
          description: 'A descriptive name of the device linked to the token'
          type: string
          example: Laptop
          nullable: false
      type: object
    GameCreateInput:
      required:
        - hostingTeamId
        - receivingTeamId
        - hostScore1
        - hostScore2
        - guestScore1
        - guestScore2
      properties:
        hostingTeamId:
          description: 'The ID of the hosting team'
          type: integer
          nullable: false
        receivingTeamId:
          description: 'The ID of the receiving team'
          type: integer
          nullable: false
        winningTeamId:
          description: 'The ID of the winning team'
          type: integer
          nullable: true
        tournamentId:
          description: 'The ID of the tournament'
          type: integer
          nullable: true
        hostScore1:
          description: 'The score of the hosting team in the first game'
          type: integer
          minimum: 0
          nullable: false
        guestScore1:
          description: 'The score of the receiving team in the first game'
          type: integer
          minimum: 0
          nullable: false
        hostScore2:
          description: 'The score of the hosting team in the second game'
          type: integer
          minimum: 0
          nullable: false
        guestScore2:
          description: 'The score of the receiving team in the second game'
          type: integer
          minimum: 0
          nullable: false
      type: object
    TeamCreateInput:
      required:
        - name
        - country_code
        - region
      properties:
        name:
          description: 'The name of the team'
          type: string
          nullable: false
        countryCode:
          description: 'The country code of the team'
          type: string
          nullable: false
        region:
          description: 'The region of the team'
          type: string
          nullable: false
      type: object
    TeamUpdateInput:
      required:
        - name
        - country_code
        - region
      properties:
        name:
          description: 'The name of the team'
          type: string
          nullable: false
        countryCode:
          description: 'The country code of the team'
          type: string
          nullable: false
        region:
          description: 'The region of the team'
          type: string
          nullable: false
      type: object
    TournamentCreateInput:
      required:
        - name
        - startsAt
      properties:
        name:
          description: 'The name of the tournament'
          type: string
          nullable: false
        startsAt:
          description: 'The starting date of the tournament'
          type: string
          format: date
          nullable: false
      type: object
    TournamentUpdateInput:
      required:
        - name
        - startsAt
      properties:
        name:
          description: 'The name of the tournament'
          type: string
          nullable: false
        startsAt:
          description: 'The starting date of the tournament'
          type: string
          format: date
          nullable: false
        endsAt:
          description: 'The ending date of the tournament'
          type: string
          format: date
          nullable: true
        goldTeamId:
          description: 'The ID of the winning team of the tournament'
          type: integer
          nullable: true
        silverTeamId:
          description: 'The ID of the second team of the tournament'
          type: integer
          nullable: true
        bronzeTeamId:
          description: 'The ID of the third team of the tournament'
          type: integer
          nullable: true
      type: object
    Game:
      required:
        - id
        - name
        - tournament
        - hostingTeam
        - receivingTeam
        - gameScoreTotal
        - gameScoreFirst
        - gameScoreSecond
      properties:
        id:
          description: 'The ID of the game'
          type: integer
          nullable: false
        name:
          description: 'The name of the game'
          type: string
          nullable: false
        tournament:
          $ref: '#/components/schemas/Tournament'
        hostingTeam:
          $ref: '#/components/schemas/Team'
        receivingTeam:
          $ref: '#/components/schemas/Team'
        gameScoreTotal:
          description: 'The global score of the game'
          type: string
          nullable: false
        gameScoreFirst:
          description: 'The score of the first subgame'
          type: string
          nullable: false
        gameScoreSecond:
          description: 'The score of the second subgame'
          type: string
          nullable: false
      type: object
    Team:
      required:
        - id
        - name
        - countryCode
        - region
        - rating
      properties:
        id:
          description: 'The ID of the team'
          type: integer
          nullable: false
        name:
          description: 'The name of the team'
          type: string
          nullable: false
        countryCode:
          description: 'The country code of the team'
          type: string
          nullable: false
        region:
          description: 'The region of the team'
          type: string
          nullable: false
        rating:
          description: 'The rating of the team'
          type: integer
          nullable: false
      type: object
    Tournament:
      required:
        - id
        - name
        - countryCode
        - region
        - rating
      properties:
        id:
          description: 'The ID of the tournament'
          type: integer
          nullable: false
        name:
          description: 'The name of the tournament'
          type: string
          nullable: false
        goldTeamId:
          oneOf:
            -
              $ref: '#/components/schemas/Team'
          nullable: true
          description: 'The winning team of the tournament'
        silverTeamId:
          oneOf:
            -
              $ref: '#/components/schemas/Team'
          nullable: true
          description: 'The second team of the tournament'
        bronzeTeamId:
          oneOf:
            -
              $ref: '#/components/schemas/Team'
          nullable: true
          description: 'The third team of the tournament'
        startsAt:
          description: 'The starting date of the tournament'
          type: string
          format: date
          nullable: false
        endsAt:
          description: 'The ending date of the tournament'
          type: string
          format: date
          nullable: true
      type: object
    Error:
      required:
        - message
      properties:
        message:
          description: 'A message describing the error'
          type: string
          nullable: false
        errors:
          description: 'A list of validation errors'
          type: object
          nullable: false
      type: object
    GamePaginatedCollection:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/PaginatedCollection'
        -
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Game'
          type: object
    PaginatedCollection:
      required:
        - data
        - links
        - meta
      properties:
        links:
          required:
            - first
            - last
            - prev
            - next
          properties:
            first:
              type: string
              nullable: false
            last:
              type: string
              nullable: false
            prev:
              type: string
              nullable: true
            next:
              type: string
              nullable: true
          type: object
        meta:
          required:
            - current_page
            - last_page
            - from
            - to
            - per_page
            - total
            - links
            - path
          properties:
            current_page:
              type: integer
              nullable: false
            last_page:
              type: integer
              nullable: false
            from:
              type: integer
              nullable: false
            to:
              type: integer
              nullable: false
            per_page:
              type: integer
              nullable: false
            total:
              type: integer
              nullable: false
            links:
              type: array
              items:
                required:
                  - url
                  - label
                  - active
                properties:
                  url: { type: string, nullable: true }
                  label: { type: string, nullable: false }
                  active: { type: boolean, nullable: false }
                type: object
              nullable: false
            path:
              type: string
              nullable: false
          type: object
      type: object
    TeamPaginatedCollection:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/PaginatedCollection'
        -
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Team'
          type: object
    TournamentPaginatedCollection:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/PaginatedCollection'
        -
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Tournament'
          type: object
  requestBodies:
    TokenRequest:
      description: 'Request body for creating a JWT token'
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenCreateInput'
    GameCreateRequest:
      description: 'Request body for creating a game'
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GameCreateInput'
    TeamCreateRequest:
      description: 'Request body for creating a team'
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TeamCreateInput'
    TeamUpdateRequest:
      description: 'Request body for updating a team'
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TeamUpdateInput'
    TournamentCreateRequest:
      description: 'Request body for creating a tournament'
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TournamentCreateInput'
    TournamentUpdateRequest:
      description: 'Request body for updating a tournament'
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TournamentUpdateInput'
tags:
  -
    name: Auth
    description: Auth
  -
    name: Game
    description: Game
  -
    name: Team
    description: Team
  -
    name: Tournament
    description: Tournament
